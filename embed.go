package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func embed_cssmate_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x55,
		0x4d, 0x8f, 0xdb, 0x36, 0x10, 0x3d, 0x3b, 0x40, 0xfe, 0xc3, 0xe4, 0x12,
		0xc9, 0xbb, 0xae, 0x94, 0x16, 0x3d, 0xd9, 0x0d, 0x82, 0x36, 0x69, 0xd1,
		0x16, 0x68, 0x0a, 0xc4, 0x2d, 0x72, 0xd8, 0xee, 0x81, 0x92, 0x46, 0x12,
		0xd7, 0x32, 0x29, 0x90, 0xf4, 0x1a, 0xc6, 0xc6, 0xff, 0xbd, 0x33, 0x24,
		0x65, 0xc9, 0x76, 0x82, 0xbd, 0x58, 0xf2, 0xe3, 0x0c, 0xe7, 0xcd, 0x9b,
		0x0f, 0xa5, 0xf5, 0x4e, 0x95, 0x4e, 0x6a, 0x95, 0xce, 0xe1, 0xe9, 0xe5,
		0x8b, 0x59, 0x7e, 0x73, 0x43, 0xbf, 0x70, 0x03, 0xa5, 0xb5, 0x5b, 0xe1,
		0x30, 0xfc, 0x09, 0xbf, 0x9f, 0x64, 0xb9, 0x91, 0xf0, 0xbb, 0xb0, 0x4e,
		0xaa, 0xc6, 0x42, 0x5a, 0xce, 0xe1, 0x87, 0x37, 0xdf, 0xff, 0x08, 0xdf,
		0x41, 0xeb, 0x5c, 0x6f, 0x97, 0x79, 0xde, 0x48, 0xd7, 0xee, 0x8a, 0xac,
		0xd4, 0xdb, 0xdc, 0xb0, 0x71, 0x1b, 0x6d, 0x83, 0xff, 0x73, 0x56, 0xf9,
		0x34, 0x66, 0xfe, 0xf2, 0x05, 0x3d, 0x1f, 0x85, 0x81, 0x52, 0x2b, 0x85,
		0x9e, 0xe3, 0x2a, 0x22, 0xb5, 0xec, 0xd0, 0xc2, 0x5b, 0xb8, 0xbb, 0x1f,
		0x10, 0x27, 0x1a, 0x06, 0x9e, 0x8e, 0xab, 0xd1, 0xa9, 0x96, 0x0d, 0x43,
		0x04, 0xcc, 0x2a, 0x69, 0x45, 0xd1, 0x61, 0xb5, 0x84, 0x5a, 0x74, 0x16,
		0x17, 0x8c, 0xb5, 0xda, 0x3a, 0x25, 0xb6, 0xb8, 0x84, 0xfc, 0x06, 0xa4,
		0x7a, 0xa0, 0x10, 0x4b, 0xc6, 0x28, 0xb4, 0x3f, 0xef, 0xb5, 0x71, 0xd3,
		0x33, 0xfe, 0x1f, 0xcf, 0x8e, 0x9e, 0xdb, 0xa0, 0x1c, 0x19, 0x48, 0x17,
		0xe5, 0x9b, 0x35, 0xe8, 0xde, 0xaf, 0xd7, 0x1f, 0xb0, 0xb7, 0xe9, 0x9c,
		0xb9, 0xcc, 0xf6, 0x58, 0x58, 0x5d, 0x6e, 0x08, 0x0e, 0x69, 0x04, 0xf8,
		0xe2, 0x86, 0xa9, 0x57, 0xb8, 0x87, 0x73, 0xe8, 0xa4, 0xda, 0x70, 0x56,
		0x95, 0x2e, 0x77, 0x5b, 0x54, 0x2e, 0x23, 0xb3, 0x5f, 0x3b, 0xe4, 0x57,
		0xfb, 0xcb, 0xe1, 0x1f, 0xd1, 0x7c, 0x24, 0xfa, 0x69, 0xc2, 0x66, 0x09,
		0xdf, 0xca, 0x7e, 0xb5, 0x36, 0x90, 0xb2, 0xb3, 0x24, 0xc7, 0x37, 0x0b,
		0xe8, 0x50, 0xd1, 0x4b, 0xb8, 0xe9, 0xf5, 0xeb, 0xf0, 0x92, 0x11, 0xd8,
		0xb8, 0x76, 0x45, 0x36, 0x3f, 0xb1, 0xc1, 0x0a, 0x6e, 0x6f, 0x65, 0x8c,
		0x7b, 0x0a, 0x3c, 0x78, 0xdd, 0xc9, 0x7b, 0x2f, 0x07, 0x5d, 0x4d, 0xaa,
		0xb3, 0x60, 0xf1, 0x24, 0x6b, 0x0d, 0xd6, 0x99, 0xc1, 0xbe, 0x13, 0x25,
		0xa6, 0x1e, 0x29, 0x84, 0xc5, 0x7f, 0x3f, 0xfd, 0xb1, 0x80, 0x24, 0x09,
		0xc9, 0xcf, 0xfc, 0x0f, 0x17, 0xe7, 0x6e, 0xf0, 0xbe, 0x8f, 0xee, 0xe1,
		0xdc, 0x57, 0x32, 0xeb, 0x77, 0xb6, 0x4d, 0x07, 0x83, 0xe0, 0x79, 0xe4,
		0x9f, 0x3c, 0xa7, 0x52, 0xab, 0x0a, 0xf4, 0xce, 0x71, 0x3f, 0x42, 0x85,
		0x3d, 0xaa, 0x0a, 0x55, 0x29, 0xd1, 0x5e, 0x8b, 0x78, 0xad, 0x74, 0x48,
		0xc9, 0x99, 0x43, 0xcc, 0x6d, 0xec, 0x24, 0x22, 0xa1, 0x70, 0x0f, 0x9f,
		0xb1, 0x58, 0x7b, 0x97, 0x34, 0xd9, 0x73, 0x67, 0x26, 0x70, 0x1b, 0x3b,
		0x27, 0x1b, 0xda, 0x83, 0x90, 0x64, 0x39, 0xc1, 0x7d, 0x1b, 0x10, 0x96,
		0x9f, 0xc2, 0xc5, 0x5c, 0x8f, 0x50, 0x0a, 0x57, 0xb6, 0x90, 0xe2, 0x7c,
		0x0c, 0x67, 0x75, 0x87, 0x19, 0x1a, 0xa3, 0x4d, 0x9a, 0xbc, 0x17, 0x4a,
		0x69, 0x37, 0xb4, 0x33, 0x38, 0x3d, 0x32, 0x06, 0x8b, 0xe6, 0x11, 0x4d,
		0xb2, 0xb8, 0x8c, 0xbe, 0x98, 0x86, 0x3d, 0x29, 0xc3, 0x8f, 0x31, 0x97,
		0x4c, 0x2b, 0xdd, 0xfb, 0x32, 0x5f, 0xcc, 0xf2, 0x99, 0x91, 0x25, 0xe5,
		0xd2, 0x3f, 0xd7, 0x7f, 0x7f, 0xcc, 0xac, 0x33, 0x34, 0x6d, 0xb2, 0x3e,
		0xa4, 0x4f, 0x34, 0x82, 0x5b, 0xa1, 0x68, 0x2c, 0x92, 0x3d, 0x73, 0x27,
		0x98, 0x28, 0x54, 0xc2, 0x89, 0x65, 0x98, 0xb1, 0xec, 0x41, 0x4b, 0x95,
		0x26, 0x8b, 0x64, 0x7e, 0x9c, 0x9f, 0xd7, 0x65, 0xdf, 0x52, 0x44, 0xd7,
		0xe2, 0x64, 0x3a, 0x41, 0x5a, 0x60, 0x22, 0x0b, 0xe0, 0x58, 0x60, 0x35,
		0x89, 0xc7, 0x77, 0x71, 0xa6, 0x6c, 0x19, 0x72, 0xfc, 0x0a, 0x7b, 0xaf,
		0xcf, 0x94, 0xbe, 0x07, 0xbe, 0xa1, 0xe2, 0xe7, 0x93, 0x66, 0x1e, 0x78,
		0x46, 0xb2, 0x45, 0xb0, 0x3a, 0xe7, 0xde, 0xe9, 0x26, 0xc0, 0xf6, 0x2b,
		0x64, 0xb6, 0x68, 0xad, 0x68, 0x70, 0x42, 0x67, 0x52, 0x51, 0x1e, 0x8e,
		0x07, 0xeb, 0x17, 0x51, 0xe8, 0xec, 0x53, 0x6b, 0xcd, 0x18, 0x26, 0x27,
		0xaf, 0x70, 0x2f, 0x8c, 0xc5, 0x14, 0x33, 0xce, 0x3e, 0x0e, 0xc2, 0x75,
		0x77, 0x9c, 0x12, 0x23, 0x3a, 0x69, 0xf2, 0x9b, 0x20, 0xbd, 0x2b, 0x96,
		0xca, 0x3b, 0x73, 0xcb, 0xf7, 0x3b, 0xa2, 0x7f, 0xd0, 0x3b, 0x33, 0xec,
		0x62, 0x28, 0xa4, 0x12, 0x14, 0x91, 0x74, 0x2e, 0x34, 0x5d, 0x86, 0xd5,
		0xab, 0x61, 0xce, 0x62, 0x53, 0xcc, 0x64, 0x0d, 0xe9, 0x2b, 0x4f, 0xe5,
		0xcb, 0x17, 0xf0, 0x2f, 0x59, 0xac, 0xf1, 0x08, 0x78, 0x56, 0x03, 0x09,
		0x83, 0x6e, 0x67, 0xd4, 0xf9, 0x25, 0x76, 0x2f, 0x3d, 0xd5, 0xa9, 0xfb,
		0xc8, 0x9a, 0x66, 0x7c, 0xd2, 0x2e, 0xcb, 0x80, 0x8e, 0x81, 0xcf, 0xaf,
		0xf7, 0x59, 0x72, 0x31, 0x86, 0x0d, 0x4c, 0x12, 0x39, 0xb3, 0xc3, 0x55,
		0x3c, 0x3e, 0xc6, 0x67, 0x61, 0x50, 0xc4, 0x95, 0x10, 0x23, 0x94, 0xad,
		0x50, 0x0d, 0x56, 0xa7, 0x00, 0x06, 0x3b, 0x2d, 0xaa, 0xb5, 0x3b, 0x50,
		0x5b, 0xb6, 0x48, 0x13, 0x3b, 0x06, 0x5b, 0x5d, 0x5f, 0x72, 0xbc, 0xac,
		0x77, 0x2c, 0xab, 0x85, 0xda, 0xe8, 0xed, 0x59, 0x3b, 0x5e, 0xae, 0x91,
		0xab, 0x40, 0xa7, 0xc5, 0x14, 0x92, 0xf2, 0x99, 0x9e, 0xaf, 0xb4, 0xcb,
		0x56, 0xdd, 0x0b, 0x43, 0x53, 0xf3, 0x73, 0x4f, 0xa5, 0xa4, 0x5d, 0xdd,
		0x1d, 0xa8, 0x49, 0x07, 0x5b, 0xda, 0x8d, 0xf4, 0xb9, 0x83, 0x02, 0x69,
		0x7c, 0x62, 0x8a, 0x50, 0xd0, 0x7a, 0xdb, 0xd3, 0xac, 0x68, 0xf5, 0x5f,
		0xe2, 0xa0, 0x15, 0x8f, 0x08, 0x42, 0x1d, 0x88, 0x48, 0xa9, 0x0d, 0x2d,
		0xbf, 0x9a, 0x21, 0xd2, 0x1a, 0xa4, 0x7b, 0x37, 0xd4, 0x7b, 0x52, 0xb6,
		0x58, 0xb5, 0x73, 0x46, 0x7e, 0x39, 0x73, 0x0f, 0x0f, 0x3b, 0x9b, 0x36,
		0xd6, 0x3b, 0x59, 0xbd, 0xe5, 0x45, 0xc6, 0x8b, 0xef, 0x03, 0xb5, 0x53,
		0x3a, 0xe7, 0x0f, 0xca, 0x5f, 0xb2, 0xeb, 0xa4, 0xa5, 0x50, 0xaa, 0x1a,
		0x3e, 0x59, 0x3c, 0xde, 0x48, 0x13, 0x2e, 0xca, 0x0d, 0xd0, 0xf4, 0x4a,
		0xd2, 0xce, 0x89, 0x6d, 0x0f, 0x3a, 0x4c, 0x7c, 0x18, 0x6e, 0xff, 0x5a,
		0x18, 0xbd, 0x27, 0x1d, 0x61, 0xa3, 0xe8, 0x49, 0xfc, 0x68, 0x45, 0xcb,
		0xba, 0x46, 0xce, 0x1a, 0xb8, 0xe7, 0x82, 0x96, 0x7c, 0x72, 0xd2, 0x39,
		0x7c, 0x2c, 0x29, 0xce, 0x71, 0x4e, 0x8f, 0xff, 0x03, 0x00, 0x00, 0xff,
		0xff, 0x66, 0xd6, 0x20, 0x59, 0x7f, 0x08, 0x00, 0x00,
		},
		"embed/cssmate.js",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"embed/cssmate.js": embed_cssmate_js,

}
